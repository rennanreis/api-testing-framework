{
	"info": {
		"_postman_id": "e4d27c11-a73a-4873-b70f-9d0be8e0059b",
		"name": "SWAPI Tests",
		"description": "Tests for Star Wars API using Postman and Newman.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "673903"
	},
	"item": [
		{
			"name": "People",
			"item": [
				{
					"name": "GET - People by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"homeworldUrl\", jsonData.homeworld);\r",
									"\r",
									"if (jsonData.starships && jsonData.starships.length > 0) {\r",
									"    pm.environment.set(\"chainedStarshipUrl\", jsonData.starships[0]);\r",
									"} else {\r",
									"    pm.environment.unset(\"chainedStarshipUrl\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/people/{{personId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"people",
								"{{personId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - People by Invalid Format (abc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/people/abc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"people",
								"abc"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - People by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/people/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"people",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": " GET – Homeworld by URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{homeworldUrl}}",
							"host": [
								"{{homeworldUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Planets",
			"item": [
				{
					"name": "GET - Planet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains climate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.climate).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/planets/{{planetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"planets",
								"{{planetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Planet by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/planets/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"planets",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Planet by Invalid Format (null)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/planets/null",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"planets",
								"null"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Films",
			"item": [
				{
					"name": "GET - Film by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains director\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.director).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/{{filmId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"{{filmId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Film by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/films/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Film by Invalid Format (!@#)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/films/!@#",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"!@"
							],
							"hash": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Starships",
			"item": [
				{
					"name": "GET - Starship by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains model\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.model).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/starships/{{starshipId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"starships",
								"{{starshipId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Starship by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/starships/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"starships",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Starship by Chained URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{chainedStarshipUrl}}",
							"host": [
								"{{chainedStarshipUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vehicles",
			"item": [
				{
					"name": "GET - Vehicle by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains model\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.model).to.exist;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/vehicles/{{vehicleId }}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"{{vehicleId }}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Vehicle by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/vehicles/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"vehicles",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Species",
			"item": [
				{
					"name": "GET - Species by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains classification\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.classification).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/species/{{speciesId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"species",
								"{{speciesId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Species by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/species/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"species",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mock REST Tests",
			"item": [
				{
					"name": "POST - Create Person (mock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created ID\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Obi-Wan Kenobi\",\r\n  \"username\": \"obiwan\",\r\n  \"email\": \"kenobi@jediorder.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT - Update Person (mock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updated name is correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Obi-Wan Kenobi\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n  \"name\": \"Obi-Wan Kenobi\",\r\n  \"username\": \"master.kenobi\",\r\n  \"email\": \"obiwan@jediorder.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Delete Person (mock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Invalid Payload (mock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"console.log(\"⚠️ API accepted invalid payload:\", jsonData);\r",
									"\r",
									"pm.test(\"API should ideally reject malformed payload, but accepted it\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullname\": \"Anakin Skywalker\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chaining Tests",
			"item": [
				{
					"name": "GET - Species by ID (from Person)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/species/{{speciesIdFromPerson}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"species",
								"{{speciesIdFromPerson}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Person with Species",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const speciesUrl = jsonData.species[0]; // ex: \"https://swapi.py4e.com/api/species/1/\"\r",
									"\r",
									"if (speciesUrl) {\r",
									"    const match = speciesUrl.match(/species\\/(\\d+)/);\r",
									"    if (match) {\r",
									"        const speciesId = match[1];\r",
									"        pm.environment.set(\"speciesIdFromPerson\", speciesId);\r",
									"        console.log(\"✅ speciesIdFromPerson:\", speciesId);\r",
									"    } else {\r",
									"        console.warn(\"⚠️ Could not extract species ID from URL.\");\r",
									"    }\r",
									"} else {\r",
									"    console.warn(\"⚠️ No species[] found in response.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/people/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"people",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Film with Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const characterUrl = jsonData.characters[0]; // ex: \"https://.../people/1/\"\r",
									"\r",
									"if (characterUrl) {\r",
									"    const match = characterUrl.match(/people\\/(\\d+)/);\r",
									"    if (match) {\r",
									"        const characterId = match[1];\r",
									"        pm.environment.set(\"characterIdFromFilm\", characterId);\r",
									"        console.log(\"✅ characterIdFromFilm:\", characterId);\r",
									"    } else {\r",
									"        console.warn(\"⚠️ Could not extract character ID from URL.\");\r",
									"    }\r",
									"} else {\r",
									"    console.warn(\"⚠️ No characters[] found in film response.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/films/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"films",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Character by ID (from Film)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Character has name\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/people/{{characterIdFromFilm}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"people",
								"{{characterIdFromFilm}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}